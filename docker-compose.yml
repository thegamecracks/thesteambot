services:
  bot:
    build:
      context: .
    command: thesteambot.bot
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    develop:
      watch:
        - path: packages/bot/
          action: rebuild
    env_file:
      - .env
      - .env.bot
    # restart: unless-stopped
  db:
    image: postgres:17
    environment:
      # Initialization
      POSTGRES_PASSWORD: ${DB_PASSWORD:?}
      POSTGRES_USER: ${DB_USER:?}
      POSTGRES_DB: ${DB_DATABASE:?}
      PGDATA: /var/lib/postgresql/17/docker
      # Healthcheck
      PGPORT: ${DB_PORT:?}
      PGPASSWORD: ${DB_PASSWORD:?}
      PGUSER: ${DB_USER:?}
      PGDATABASE: ${DB_DATABASE:?}
    expose:
      - ${DB_PORT:?}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
      start_interval: 3s
    restart: always
    volumes:
      - db-data:/var/lib/postgresql
  db-migrate:
    build:
      context: .
    command: thesteambot.db.migrate --host db
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
  web:
    build:
      context: .
    command: thesteambot.web
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    develop:
      watch:
        - path: packages/web/src/thesteambot/web/static/
          target: /packages/web/src/thesteambot/web/static/
          action: sync
        - path: packages/web/src/thesteambot/web/templates/
          target: /packages/web/src/thesteambot/web/templates/
          action: sync
        - path: packages/web/
          ignore:
            - '**/static/'
            - '**/templates/'
          action: rebuild
    env_file:
      - .env
      - .env.web
    ports:
      - 2500:8000
    # restart: unless-stopped

volumes:
  db-data:
